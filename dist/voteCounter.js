"use strict";
// create a component that count every votes and display the total votes
class VoteCounter extends HTMLElement {
    constructor() {
        super();
        this.count = 0;
        this.corum = 0;
        this.box = document.createElement('div');
        this.box.className = 'vote-content';
        this.setCounter();
        this.setCorumConfigurator();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.shadow.appendChild(this.box);
    }
    setCorumConfigurator() {
        const corumConfigurator = document.createElement('div');
        corumConfigurator.setAttribute('name', 'Corum Configurator');
        this.box.appendChild(corumConfigurator);
    }
    setCounter() {
        const box = document.createElement('div');
        box.className = 'vote-counter';
        box.appendChild(this.setupStyles());
        const div = document.createElement('div');
        div.className = 'vote-counter-corum';
        div.appendChild(this.newVoteCount());
        // div.appendChild(this.newCorum());
        box.appendChild(div);
        box.appendChild(this.newVoteCounterDescription());
        this.box.appendChild(box);
    }
    setupStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .vote-counter {
                padding: 10px;
           }

           .vote-counter-corum {
                display: flex;
                justify-content: center;
                margin: 0;
            }

            .vote-counter-description {
                display: flex;
                justify-content: center;
                margin: 0;
            }

            h1 {
                font-size: 3em;
                margin: 0;
            }
        `;
        return style;
    }
    newVoteCount() {
        const voteCount = document.createElement('h1');
        voteCount.className = 'vote-count';
        voteCount.textContent = '0';
        document.addEventListener('logAdded', (e) => {
            const event = e;
            if (event.detail.eventType === 'voteAdded')
                this.count++;
            if (event.detail.eventType === 'voteRemoved')
                this.count--;
            voteCount.textContent = this.count.toString();
        });
        return voteCount;
    }
    newCorum() {
        const voteCount = document.createElement('h1');
        voteCount.className = 'vote-corum';
        voteCount.textContent = ' / 0';
        return voteCount;
    }
    newVoteCounterDescription() {
        const voteCounterDescription = document.createElement('p');
        voteCounterDescription.className = 'vote-counter-description';
        voteCounterDescription.textContent = 'Total de Votos';
        return voteCounterDescription;
    }
}
customElements.define('vote-counter', VoteCounter);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm90ZUNvdW50ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdm90ZUNvdW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHdFQUF3RTtBQUV4RSxNQUFNLFdBQVksU0FBUSxXQUFXO0lBS2pDO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUFIWixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUlOLElBQUksQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUM7UUFFckMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBRTNCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsb0JBQW9CO1FBQ2hCLE1BQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4RCxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsVUFBVTtRQUNOLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUM7UUFDL0IsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUVwQyxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUM7UUFDckMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUNyQyxvQ0FBb0M7UUFDcEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVyQixHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELFdBQVc7UUFDUCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLEtBQUssQ0FBQyxXQUFXLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQXFCbkIsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxZQUFZO1FBQ1IsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQztRQUNuQyxTQUFTLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUM1QixRQUFRLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsTUFBTSxLQUFLLEdBQUcsQ0FBZ0IsQ0FBQztZQUMvQixJQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLFdBQVc7Z0JBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3hELElBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssYUFBYTtnQkFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFMUQsU0FBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVELFFBQVE7UUFDSixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO1FBQ25DLFNBQVMsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1FBRS9CLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRCx5QkFBeUI7UUFDckIsTUFBTSxzQkFBc0IsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNELHNCQUFzQixDQUFDLFNBQVMsR0FBRywwQkFBMEIsQ0FBQztRQUM5RCxzQkFBc0IsQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUM7UUFDdEQsT0FBTyxzQkFBc0IsQ0FBQztJQUNsQyxDQUFDO0NBQ0o7QUFHRCxjQUFjLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZSBhIGNvbXBvbmVudCB0aGF0IGNvdW50IGV2ZXJ5IHZvdGVzIGFuZCBkaXNwbGF5IHRoZSB0b3RhbCB2b3Rlc1xuXG5jbGFzcyBWb3RlQ291bnRlciBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBwcml2YXRlIHNoYWRvdzogU2hhZG93Um9vdDtcbiAgICBib3g6IEhUTUxFbGVtZW50O1xuICAgIGNvdW50ID0gMDtcbiAgICBjb3J1bSA9IDA7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmJveC5jbGFzc05hbWUgPSAndm90ZS1jb250ZW50JztcblxuICAgICAgIHRoaXMuc2V0Q291bnRlcigpO1xuICAgICAgIHRoaXMuc2V0Q29ydW1Db25maWd1cmF0b3IoKTtcblxuICAgICAgICB0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB0aGlzLnNoYWRvdy5hcHBlbmRDaGlsZCh0aGlzLmJveCk7XG4gICAgfVxuXG4gICAgc2V0Q29ydW1Db25maWd1cmF0b3IoKSB7XG4gICAgICAgIGNvbnN0IGNvcnVtQ29uZmlndXJhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvcnVtQ29uZmlndXJhdG9yLnNldEF0dHJpYnV0ZSgnbmFtZScsICdDb3J1bSBDb25maWd1cmF0b3InKTtcbiAgICAgICAgdGhpcy5ib3guYXBwZW5kQ2hpbGQoY29ydW1Db25maWd1cmF0b3IpO1xuICAgIH1cblxuICAgIHNldENvdW50ZXIoKSB7XG4gICAgICAgIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBib3guY2xhc3NOYW1lID0gJ3ZvdGUtY291bnRlcic7XG4gICAgICAgIGJveC5hcHBlbmRDaGlsZCh0aGlzLnNldHVwU3R5bGVzKCkpO1xuXG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ3ZvdGUtY291bnRlci1jb3J1bSc7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZCh0aGlzLm5ld1ZvdGVDb3VudCgpKTtcbiAgICAgICAgLy8gZGl2LmFwcGVuZENoaWxkKHRoaXMubmV3Q29ydW0oKSk7XG4gICAgICAgIGJveC5hcHBlbmRDaGlsZChkaXYpO1xuXG4gICAgICAgIGJveC5hcHBlbmRDaGlsZCh0aGlzLm5ld1ZvdGVDb3VudGVyRGVzY3JpcHRpb24oKSk7XG4gICAgICAgIHRoaXMuYm94LmFwcGVuZENoaWxkKGJveCk7XG4gICAgfVxuXG4gICAgc2V0dXBTdHlsZXMoKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBgXG4gICAgICAgICAgICAudm90ZS1jb3VudGVyIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgLnZvdGUtY291bnRlci1jb3J1bSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC52b3RlLWNvdW50ZXItZGVzY3JpcHRpb24ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBoMSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAzZW07XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgbmV3Vm90ZUNvdW50KCkge1xuICAgICAgICBjb25zdCB2b3RlQ291bnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICAgICAgICB2b3RlQ291bnQuY2xhc3NOYW1lID0gJ3ZvdGUtY291bnQnO1xuICAgICAgICB2b3RlQ291bnQudGV4dENvbnRlbnQgPSAnMCc7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2xvZ0FkZGVkJywgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gZSBhcyBDdXN0b21FdmVudDtcbiAgICAgICAgICAgIGlmKGV2ZW50LmRldGFpbC5ldmVudFR5cGUgPT09ICd2b3RlQWRkZWQnKSB0aGlzLmNvdW50Kys7XG4gICAgICAgICAgICBpZihldmVudC5kZXRhaWwuZXZlbnRUeXBlID09PSAndm90ZVJlbW92ZWQnKSB0aGlzLmNvdW50LS07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZvdGVDb3VudC50ZXh0Q29udGVudCA9IHRoaXMuY291bnQudG9TdHJpbmcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHZvdGVDb3VudDtcbiAgICB9XG5cbiAgICBuZXdDb3J1bSgpIHtcbiAgICAgICAgY29uc3Qgdm90ZUNvdW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDEnKTtcbiAgICAgICAgdm90ZUNvdW50LmNsYXNzTmFtZSA9ICd2b3RlLWNvcnVtJztcbiAgICAgICAgdm90ZUNvdW50LnRleHRDb250ZW50ID0gJyAvIDAnO1xuXG4gICAgICAgIHJldHVybiB2b3RlQ291bnQ7XG4gICAgfVxuXG4gICAgbmV3Vm90ZUNvdW50ZXJEZXNjcmlwdGlvbigpIHtcbiAgICAgICAgY29uc3Qgdm90ZUNvdW50ZXJEZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgdm90ZUNvdW50ZXJEZXNjcmlwdGlvbi5jbGFzc05hbWUgPSAndm90ZS1jb3VudGVyLWRlc2NyaXB0aW9uJztcbiAgICAgICAgdm90ZUNvdW50ZXJEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9ICdUb3RhbCBkZSBWb3Rvcyc7XG4gICAgICAgIHJldHVybiB2b3RlQ291bnRlckRlc2NyaXB0aW9uO1xuICAgIH1cbn1cblxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3ZvdGUtY291bnRlcicsIFZvdGVDb3VudGVyKTsiXX0=